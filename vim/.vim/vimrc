" Ben Mezger
" some configs from:
" https://github.com/rstacruz/vim-opinion/

if has('python3')
  silent! python3 1
endif

source ~/.vim/plugins.vim " include plugs

" default file encoding and unicode
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb                     " vim will put a 'byte order mark' (
                             " or BOM for short) at the start of Unicode files
set fileformats=unix,mac,dos " recognize file formats

set backspace=indent,eol,start " make backspace work like most other apps

" space > tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab " insert space character when tab is pressed
set modeline
set expandtab " helps with backspacing because of expandtab
set textwidth=80
set autoindent

" options
" opening a new file when the current buffer has unsaved changes causes files " to be hidden instead of closed.
" The unsaved changes can still be accessed by typing :ls and then :b[N],
" where [N] is the number of a buffer
" see: http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden         " don't care about closing modified buffers
set showcmd        " display incomplete commands
set history=50     " keep 50 lines of command line history
let mapleader=','  " use ',' as mapleader
set colorcolumn=80 " Color in column 80
set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set cursorline     " find cursor faster.

               " searching
set hlsearch   " highlight all search matches
set incsearch  " start searching when you type the first character of the search string
set ignorecase " searching is not case sensitive
set smartcase  " when 'ignorecase' and 'smartcase' are both on, if a
               " pattern contains an uppercase letter, it is case sensitive,
               " otherwise, it is not
set gdefault   " sub all matches in a line by default

set binary        " makes Vim more suitable for editing binary files
set shell=/bin/sh " use sh as default shell

" programming
syntax on
set cindent          " enables automatic indenting c-style
set cinoptions=l1,j1 " affects the way cindent reindents lines
set showmatch        " flashes matching brackets or parenthasis
set matchtime=3      " how long to flash brackets

" backups
set nobackup       " don't backup
set nowritebackup  " don't make backup before overwritting
set noswapfile     " fuck swapfiles
set directory=/tmp " dir for tmp files

" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" info
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set numberwidth=5   " width of number column
set showmode        " shows vi mode in lower left
set cmdheight=1     " more room for error msgs
set scrolloff=4     " places a couple lines between the current line and the screen edge
set sidescrolloff=2 " places a couple lines between the current column and the screen edge
set laststatus=2    " status bar always visible
set ttyfast         " improve redrawing
set lazyredraw      " will not redraw the screen while running macros (goes faster)

if has('linebreak')
  try
    set breakindent             " visually indent wrapped lines
    let &showbreak='↳'
  catch /E518:/
    " Unknown option: breakindent
  endtry
endif

" menu compilation

set wildmenu                    " enhanced ed command completion
set wildignore+=*.~             " ignore compiled objects and backups
set wig+=*.o,*.obj,*.pyc
set wig+=.sass-cache,tmp
set wildmode=longest:full,list:full

" appearance
colorscheme base16-monokai
let base16colorspace=256 " Access colors present in 256 colorspace
set background=dark

" statusline config from -> http://stackoverflow.com/a/5380230/6744969
hi User1 ctermfg=16 ctermbg=234
hi User2 ctermfg=196 ctermbg=234
hi User3 ctermfg=171 ctermbg=234
hi User4 ctermfg=70 ctermbg=234
hi User5 ctermfg=226 ctermbg=234

set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*\ \|%{&fo}\|        "display format-options
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor

" keybindings to make life easier
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

"
" plugs
"

" neomake
let g:neomake_open_list = 2 " open list automatically
" enable linters
let g:neomake_javascript_enabled_makers = ['eslint']
" detect current eseling through node_module
au BufEnter *.js let b:neomake_javascript_eslint_exe = nrun#Which('eslint')
call neomake#configure#automake('nrwi', 500)

"" vim-gitgutter
set updatetime=250                  " . The delay is governed by vim's updatetime option
let g:gitgutter_highlight_lines = 0 " highlight line

"" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"" vim-easy align
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"" vim-markdown
let g:vim_markdown_folding_disabled = 1 " Disable folding

" Allow for TOC window to auto-fit when it's possible to it to shrink
let g:vim_markdown_toc_autofit = 1

" fenced code block
let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'python=py', 'c=c']

" used as $x^2$, $$x^2$$, escapable as \$x\$ and \$\$x\$\$
let g:vim_markdown_math = 1


"" vim-startify

" bookmarks
let g:startify_bookmarks = [{'d': '~/dotfiles'},
            \ {'w': '~/workspace'},
            \ {'t': '/etc'},
            \ ]

let g:startify_update_oldfiles = 0 " update :Startify on-the-fly
let g:startify_session_autoload = 1 " auto load session if dir contains a Session.vim
let g:startify_files_number = 20 " show 20 files

"" Rainbow Parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rainbow_active = 1
au BufRead,BufNewFile *.{md,txt} setlocal textwidth=80

"" Use deoplete.
let g:deoplete#enable_at_startup = 1

" use tab instdead
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" completion delay
call deoplete#custom#option({
\ 'auto_complete_delay': 10,
\ })

" jedi
let g:deoplete#sources#jedi#enable_typeinfo = 0
let g:deoplete#sources#jedi#show_docstring = 0

let g:python_version = matchstr(system("python --version | cut -f2 -d' '"), '^[0-9]')
if g:python_version =~ 3
    let g:python_host_prog = "/usr/local/bin/python2"
else
    let g:python3_host_prog = "/usr/local/bin/python3"
endif

let g:deoplete#sources#clang#libclang_path = "/Library/Developer/CommandLineTools/usr/lib/libclang.dylib"

" denite
call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

" Change mappings.
call denite#custom#map(
    \ 'insert',
    \ '<C-j>',
    \ '<denite:move_to_next_line>',
    \ 'noremap'
    \)
call denite#custom#map(
    \ 'insert',
    \ '<C-k>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap'
    \)

" Ag command on grep source
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Change ignore_globs
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

" disable preview window
set completeopt-=preview

" yank to clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif
