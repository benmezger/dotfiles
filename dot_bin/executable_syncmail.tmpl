#!/usr/bin/env python3

# Author: Ben Mezger <me@benmezger.nl>
# Created at <2021-08-21 Sat 19:30>

import pathlib
import subprocess
import logging
import sys
import os
import fcntl
from typing import List
from contextlib import contextmanager

BACKGROUND = os.environ.get("SYNCMAIL_BACKGROUND", False)
DISABLE_FILENAME = "/tmp/syncmail.disable"
DISABLE = pathlib.Path(DISABLE_FILENAME).exists()

root = logging.getLogger()
root.setLevel(logging.DEBUG)

handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
root.addHandler(handler)

# PERSONAL_EMAIL and WORK_EMAIL is automatically by 'chezmoi apply'.
# The variables '.email', '.workconf' and '.work.workmail' is located in dotfiles/.chezmoi.yaml.tmpl
MAILDIR = "{{ .maildir }}"
PERSONAL_EMAIL = "{{ .email }}"
WORK_EMAIL = "{{ if .workconf }}{{ .work.workmail }}{{ end }}"

MAILDIR = pathlib.Path(MAILDIR)
PERSONAL_MAILDIR = MAILDIR.joinpath("personal")
WORK_MAILDIR = MAILDIR.joinpath("work") if len(WORK_EMAIL) else None

NOTMUCH_BIN = (
    pathlib.Path().joinpath("/usr/local/bin/notmuch")
    if os.uname().sysname == "Darwin"
    else pathlib.Path().joinpath("/usr/bin/notmuch")
)

AFEW_BIN = "afew"

MBSYNC_BIN = (
    pathlib.Path().joinpath("/usr/local/bin/mbsync")
    if os.uname().sysname == "Darwin" and os.uname().machine != "arm64"
    else pathlib.Path().joinpath("/opt/homebrew/bin/mbsync")
    if os.uname().sysname == "Darwin" and os.uname().machine == "arm64"
    else pathlib.Path().joinpath("/usr/bin/mbsync")
)

FILENAME = __file__.split("/")[-1].strip(".py")
LOCKFILE = pathlib.Path().joinpath(f"/tmp/{FILENAME}.flock")


def ensure_dir(path: pathlib.Path):
    root.info(f"Ensuring dir {path}")
    path.mkdir(exist_ok=True)


def call_mbsync(extra_args: List[str] = []):
    root.info(f"Running mbsync")
    result = subprocess.run([MBSYNC_BIN, "-Va"] + extra_args)
    root.info(f"mbsync returned code {result.returncode}")
    return False if result.returncode else True


def call_notmuch(extra_args: List[str] = []):
    root.info(f"Running notmuch")
    result = subprocess.run([NOTMUCH_BIN, "new"] + extra_args)
    root.info(f"notmuch returned code {result.returncode}")
    return False if result.returncode else True


def run_afew(extra_args: List[str]):
    root.info(f"Running afew move directories")
    result = subprocess.run([AFEW_BIN] + extra_args)
    root.info(f"notmuch returned code {result.returncode}")
    return False if result.returncode else True


def __lock_acquire(should_exit=True):
    lockfile = open(LOCKFILE, "w")

    if should_exit:
        try:
            fcntl.flock(lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except BlockingIOError:
            logging.warning("Lock already aquired by another process. Exiting.")
            sys.exit(0)
    else:
        # wait for unlock
        fcntl.flock(lockfile, fcntl.LOCK_EX)

    logging.info(f"{lockfile} lock acquired.")
    return lockfile


def __lock_release(lockfile):
    logging.info(f"realeasing lock {__file__}.")
    fcntl.flock(lockfile, fcntl.LOCK_UN)
    os.close(lockfile.fileno())
    logging.info(f"lock {__file__} released.")


@contextmanager
def lock_acquire(should_exit=True):
    lock = __lock_acquire(should_exit=should_exit)

    try:
        yield lock
    finally:
        __lock_release(lock)


def main():
    ensure_dir(MAILDIR)
    ensure_dir(PERSONAL_MAILDIR)
    ensure_dir(WORK_MAILDIR) if WORK_MAILDIR else None

    afew_move = run_afew(["--all", "-m", "-v"])
    mbsync_ok = call_mbsync() if afew_move else False
    call_notmuch() if mbsync_ok else False

    if BACKGROUND:
        logging.info("Background is enabled. Running 'afew' against all tags")
        run_afew(["--all", "-t", "-v"])


if __name__ == "__main__":
    if not DISABLE:
        with lock_acquire() as lock:
            main()
    else:
        logging.info(f"Skipping syncmail. '{DISABLE_FILENAME}' exists.")
