#+TITLE: System commands
#+SUBTITLE: Personal commands
#+AUTHOR: Ben Mezger
#+DATE: <2020-08-07 Fri>
#+OPTIONS: ^:nil

These are general commands I use while managing my =dotfiles= and my system . I
run them in orgmode itself, but you can simply copy and paste it to your
terminal.

* Chezmoi :dotfiles:chezmoi:

- Apply dotfile changes with Chezmoi.
  #+BEGIN_SRC shell :dir ~/ :cache no :results replace code
  cd $dir
  chezmoi apply -v
  #+END_SRC
- View difference between dotfiles and restores files.
  #+BEGIN_SRC shell :dir ~/ :cache no :results replace code
  cd $dir
  chezmoi diff
  #+END_SRC

- Initialize chezmoi repository, reloading =$HOME/.config/chezmoi/chezmoi.[yaml|toml]=
  #+BEGIN_SRC shell :dir ~/ :cache no :results replace code
  cd $dir
  chezmoi init ~/dotfiles
  #+END_SRC

- 1Password integration
  Chezmoi requires 1password for the following files:
  |------------------------|
  | ./dot_env-secrets.tmpl |
  | ./dot_mbsyncrc.tmpl    |
  |------------------------|

  As a result, it requires 1Password cli installed and logged with =eval $(op
  signin my.1password.com <email>)=. Make sure you change any 1Password UUID
  from these files with your UUID.
 
  You can test your UUID with:
  #+BEGIN_SRC shell
  op get item <uuid> | jq .details.password
  #+END_SRC

  Chezmoi will only run 1Password against these files if:
    + Environment is not set to =CI=
    + =chezmoi.yaml= has =secrets= set to =true=.

* Emacs :emacs:
General Emacs maintanence.

** Doom emacs
- Doom compile core and private modules
  #+BEGIN_SRC shell :dir ~/ :cache no :results replace code
  .emacs.d/bin/doom compile :core :private lang/org lang/python tools lang/yaml tools/lsp
  #+END_SRC

** OSX :osx:
- Compile Emacs 28 on OSX with native json support
  #+BEGIN_SRC :cache no
  brew install emacs-plus@28 --with-jansson
  #+END_SRC

* Linux :linux:
General Linux commands

- Speed up keyboard
  #+BEGIN_SRC :cache no
  xset r rate 180 40
  #+END_SRC

** Archlinux :archlinux:
- List =pacman= packages ignoring foreing packages (AUR, etc).
  #+BEGIN_SRC sh :results file :file pkgs.pacman :output-dir ./roles/archlinux/tasks/
  pacman -Qqen
  #+END_SRC

  #+RESULTS: Pacman list installed packages without AUR
  [[file:./roles/archlinux/tasks/pkgs.pacman]]

- Get list of foreing (AUR, etc) packages with =pacman=.
  #+BEGIN_SRC sh :results file :file pkgs.aur :output-dir ./roles/archlinux/tasks/
  pacman -Qqem
  #+END_SRC

  #+RESULTS: Pacman list AUR packages
  [[file:./roles/archlinux/tasks/pkgs.aur]]

- Enable color, total download, check space and verbose pkg list when running
  =pacman=.
  #+BEGIN_SRC shell :dir "/sudo::" :cache no
  sudo sed -i '/Color$/s/^#//g' /etc/pacman.conf
  sudo sed -i '/TotalDownload$/s/^#//g' /etc/pacman.conf
  sudo sed -i '/CheckSpace$/s/^#//g' /etc/pacman.conf
  sudo sed -i '/VerbosePkgLists$/s/^#//g' /etc/pacman.conf
  #+END_SRC
- Find all =*.pacnew= files in =/etc=
  #+BEGIN_SRC shell :cache no :dir "/sudo::" :results output
  find /etc -regextype posix-extended -regex ".+\.pac(new|save)"
  #+END_SRC

*** Docker :docker:
- Allow Docker runs with non-root user.
  #+BEGIN_SRC shell
  sudo usermod -aG docker $USER
  newgrp docker
  #+END_SRC

** Sourcing env with i3
- For some reason, i3 is sourcing =.xprofile= instead of =xinitrc=, so for
  getting Github plugin for the [[file:dot_config/i3/status.toml][i3status-rust]] you need to set up a variable in
  your =.xprofile=
  #+BEGIN_SRC shell
  export I3RS_GITHUB_TOKEN="your-github-token"
  #+END_SRC

* OSX
** Set OSX defaults
#+BEGIN_SRC shell
# Turn on app auto-update
defaults write com.apple.commerce AutoUpdate -bool true

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Check for software updates daily, not just once per week
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# Donâ€™t show recent applications in Dock
defaults write com.apple.dock show-recents -bool false

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

# Remove the auto-hiding Dock delay
defaults write com.apple.dock autohide-delay -float 0
# Remove the animation when hiding/showing the Dock
defaults write com.apple.dock autohide-time-modifier -float 0
#+END_SRC
